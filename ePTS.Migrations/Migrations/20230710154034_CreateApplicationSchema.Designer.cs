// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ePTS.Data;

#nullable disable

namespace ePTS.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230710154034_CreateApplicationSchema")]
    partial class CreateApplicationSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClaimId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClaimId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserToken", (string)null);
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.Assessment", b =>
                {
                    b.Property<Guid>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each assessment record in the table");

                    b.Property<string>("AssessmentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(3);

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4)
                        .HasComment("A short code that represents the assessment");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RefAssessmentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("A reference to the status of assessment. This is a foreign key that references the RefAssessmentStatus table");

                    b.Property<int?>("RefAssessmentTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("A reference to the type of assessment. This is a foreign key that references the RefAssessmentType table");

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("A reference to the grade level of the assessment. This is a foreign key that references the GradeLevel table");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2)
                        .HasComment("Date on which the assessment was registered or added to the database");

                    b.HasKey("AssessmentId");

                    b.HasIndex("RefAssessmentStatusId");

                    b.HasIndex("RefAssessmentTypeId");

                    b.HasIndex("RefGradeLevelId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentItem", b =>
                {
                    b.Property<Guid>("AssessmentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("AssessmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<string>("AssessmentItemDescription")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(7);

                    b.Property<int?>("AssessmentItemNumber")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("AssessmentItemText")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(6);

                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(4);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("MaximumScore")
                        .HasColumnType("float")
                        .HasColumnOrder(8);

                    b.Property<double?>("MinimumScore")
                        .HasColumnType("float")
                        .HasColumnOrder(9);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RefAssessmentCategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.HasKey("AssessmentItemId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("RefAssessmentCategoryId");

                    b.ToTable("AssessmentItem");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentPerformanceLevel", b =>
                {
                    b.Property<Guid>("AssessmentPerformanceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each assessment performance level record in the table");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GradebookAssessmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Reference to the gradebook assessment to which the assessment performance level belongs to. This is a foreign key that references the GradebookAssessment table");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RefPerformanceLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A reference to the performance level of an assessment, such as minimum, desirable, or outstanding. This is a foreign key that references the RefPerformanceLevel table");

                    b.Property<int>("RefSexId")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("A reference to the sex of a learner or teacher, such as male, or female. This is a foreign key that references the RefSex table");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(3)
                        .HasComment("Date on which the assessment performance level was registered or added to the database");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.HasKey("AssessmentPerformanceLevelId");

                    b.HasIndex("RefPerformanceLevelId");

                    b.HasIndex("RefSexId");

                    b.HasIndex("GradebookAssessmentId", "RefPerformanceLevelId", "RefSexId")
                        .IsUnique();

                    b.ToTable("AssessmentPerformanceLevel");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentResult", b =>
                {
                    b.Property<Guid>("AssessmentResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each assessment result record in the table");

                    b.Property<Guid>("AssessmentItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4)
                        .HasComment("A reference to the item of an assessment category. It represents the specific question items associated with a particular category, such as the fuency category, within a specific grade level. This is a foreign key that references the RefAssessmentItem table");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GradebookAssessmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Reference to the gradebook assessment of a grade, such as grade 1 term 1 week 5. This is a foreign key that references the GradebookAssessment table");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(3)
                        .HasComment("Date on which the assessment result was registered or added to the database");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("The cumulative number of correct responses from all participants");

                    b.Property<int?>("ScoreFemale")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("Represents the count of accurate responses provided by female participants");

                    b.Property<int?>("ScoreMale")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Represents the count of accurate responses provided by male participants");

                    b.HasKey("AssessmentResultId");

                    b.HasIndex("AssessmentItemId");

                    b.HasIndex("GradebookAssessmentId", "AssessmentItemId")
                        .IsUnique();

                    b.ToTable("AssessmentResult");
                });

            modelBuilder.Entity("ePTS.Entities.Audit.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonLog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("TimeStamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("ePTS.Entities.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ePTS.Entities.Core.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each organization, such as educational institutions or school districts");

                    b.Property<string>("Address")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(7)
                        .HasComment("The physical address of the organization, which could include street name, street number, zip code, etc");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("A short code that represents the unique organization");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizationUnit")
                        .HasColumnType("bit")
                        .HasColumnOrder(11)
                        .HasComment("A Boolean value indicating whether this entity is a container");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnOrder(9)
                        .HasComment("Latitude coordinates of the organization's location in decimal degrees format");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnOrder(10)
                        .HasComment("Longitude coordinates of the organization's location in decimal degrees format");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4)
                        .HasComment("The name of the organization");

                    b.Property<Guid?>("ParentOrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasComment("Reference to the parent organization of this organization, if any (e.g. a district could have multiple schools as its child organizations)");

                    b.Property<string>("RefLocationId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(6)
                        .HasComment("A reference to the geographic location of the organization");

                    b.Property<int?>("RefOrganizationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("A reference to the type of organization to which this entity belongs (e.g. school, district, etc.)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2)
                        .HasComment("Date on which the organization was registered or added to the database");

                    b.HasKey("OrganizationId");

                    b.HasIndex("ParentOrganizationId");

                    b.HasIndex("RefLocationId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.ToTable("Organization");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ePTS.Entities.Core.SchoolAcademicYear", b =>
                {
                    b.Property<Guid>("SchoolAcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each academic year record");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("The ending date for the academic year");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMissingEnrollment")
                        .HasColumnType("bit")
                        .HasColumnOrder(8)
                        .HasComment("Indicates whether the academic year is missing enrollment data");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Unique identifier of the school that the academic year belongs to. This is a foreign key that references the School table");

                    b.Property<int>("RefAcademicYearId")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("A reference to the academic year, such as 2022, 2023, etc. This is a foreign key that references the RefAcademicYear table");

                    b.Property<int?>("RefAcademicYearStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("A reference to the status of the academic year, such as started, not started, completed, or closed. This is a foreign key that references the RefAcademicYearStatus table");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(4)
                        .HasComment("Date on which the school academic year was registered or added to the database");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("the starting date for the academic year");

                    b.HasKey("SchoolAcademicYearId");

                    b.HasIndex("RefAcademicYearId");

                    b.HasIndex("RefAcademicYearStatusId");

                    b.HasIndex("OrganizationId", "RefAcademicYearId")
                        .IsUnique();

                    b.ToTable("SchoolAcademicYear");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.Gradebook", b =>
                {
                    b.Property<Guid>("GradebookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each gradebook");

                    b.Property<Guid?>("AssessmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6)
                        .HasComment("Reference to the default assessment form for a grade. It includes assessments and their associated items. This is a foreign key that references the Assessment table");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("GradebookPeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5)
                        .HasComment("A reference to the default gradebook period for a grade school, such as term 1, term 2, or term 3. This is a foreign key that references the SchoolType table");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMissingGradebookAssessments")
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasComment("Indicates whether the gradebook is missing assessments");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RefAssessmentPlatformTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("A reference to the type of platform for the assessment, such as web or android. This is a foreign key that references the RefAssessmentPlatformType table");

                    b.Property<int>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("A reference to the grade level of the gradebook. This is a foreign key that references the GradeLevel table");

                    b.Property<int?>("RefGradebookStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("A reference to the status of a gradebook, such as active or inactive. This is a foreign key that references the RefGradebookStatus table");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(4)
                        .HasComment("Date on which the gradebook was registered or added to the database");

                    b.Property<Guid>("SchoolAcademicYearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Reference to the academic year to which the gradebook belongs. This is a foreign key that references the SchoolAcademicYear table");

                    b.HasKey("GradebookId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("GradebookPeriodId");

                    b.HasIndex("RefAssessmentPlatformTypeId");

                    b.HasIndex("RefGradeLevelId");

                    b.HasIndex("RefGradebookStatusId");

                    b.HasIndex("SchoolAcademicYearId", "RefGradeLevelId")
                        .IsUnique();

                    b.ToTable("Gradebook");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookAssessment", b =>
                {
                    b.Property<Guid>("GradebookAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each gradebook assessment record in the table");

                    b.Property<int>("AssessedFemale")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("AssessedMale")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GradebookAssessmentPeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3)
                        .HasComment("A reference to the gradebook assessment period of the gradebook. This is a foreign key that references the GradebookAssessmentPeriod table");

                    b.Property<Guid>("GradebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("Reference to the gradebook to which the assessment aggregate belongs to. This is a foreign key that references the Gradebook table");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMissingAssessmentResults")
                        .HasColumnType("bit")
                        .HasColumnOrder(12)
                        .HasComment("Indicates whether the assessment results are missing or not");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RefGradebookAssessmentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(11)
                        .HasComment("A reference to the status of the gradebook, such as active or inactive. This is a foreign key that references the RefGradebookStatus table");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(4)
                        .HasComment("Date on which the gradebook assessment was registered or added to the database");

                    b.HasKey("GradebookAssessmentId");

                    b.HasIndex("GradebookAssessmentPeriodId");

                    b.HasIndex("RefGradebookAssessmentStatusId");

                    b.HasIndex("GradebookId", "GradebookAssessmentPeriodId")
                        .IsUnique();

                    b.ToTable("GradebookAssessment");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookAssessmentPeriod", b =>
                {
                    b.Property<Guid>("GradebookAssessmentPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("A short code that represents the gradebook assessment period");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8)
                        .HasComment("Date on which the period ends");

                    b.Property<string>("GradebookAssessmentPeriodName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("GradebookPeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RefAssessmentTermId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("RefAssessmentWeekId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7)
                        .HasComment("Date on which the period starts");

                    b.HasKey("GradebookAssessmentPeriodId");

                    b.HasIndex("GradebookPeriodId");

                    b.HasIndex("RefAssessmentTermId");

                    b.HasIndex("RefAssessmentWeekId");

                    b.ToTable("GradebookAssessmentPeriod");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookEnrollment", b =>
                {
                    b.Property<Guid>("GradebookEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("Unique identifier for each gradebook enrollment record");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Female")
                        .HasColumnType("int")
                        .HasColumnOrder(8)
                        .HasComment("The number of female participants enrolled in the school at the specified grade level");

                    b.Property<Guid>("GradebookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2)
                        .HasComment("A reference to the gradebook where the enrollment was registered. This is a foreign key that references the Gradebook table");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Male")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("The number of male participants enrolled in the school at the specified grade level");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RefParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("A reference to the type of participant (e.g. learner, teacher) enrolled. This is a foreign key that references the ParticipantType table");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(3)
                        .HasComment("Date on which the gradebook enrollment was registered or added to the database");

                    b.HasKey("GradebookEnrollmentId");

                    b.HasIndex("RefParticipantTypeId");

                    b.HasIndex("GradebookId", "RefParticipantTypeId")
                        .IsUnique();

                    b.ToTable("GradebookEnrollment");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookPeriod", b =>
                {
                    b.Property<Guid>("GradebookPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4)
                        .HasComment("A short code that represents the gradebook period");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GradebookPeriodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("A reference to the grade level of the gradebook period. This is a foreign key that references the GradeLevel table");

                    b.Property<int?>("RefGradebookPeriodStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("RefGradebookPeriodTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnOrder(3)
                        .HasComment("Date on which the gradebook period was registered or added to the database");

                    b.HasKey("GradebookPeriodId");

                    b.HasIndex("RefGradeLevelId");

                    b.HasIndex("RefGradebookPeriodStatusId");

                    b.HasIndex("RefGradebookPeriodTypeId");

                    b.ToTable("GradebookPeriod");
                });

            modelBuilder.Entity("ePTS.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationRole", (string)null);
                });

            modelBuilder.Entity("ePTS.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(6)
                        .HasComment("The user or entity responsible for creating or adding the record");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date and time when the record was created");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(10)
                        .HasComment("The user or entity responsible for marking the record as deleted");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(11)
                        .HasComment("The date and time when the record was marked as deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnOrder(4)
                        .HasComment("The first name or given name of a user");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(12)
                        .HasComment("A flag indicating whether the record is marked as deleted (true) or active (false)");

                    b.Property<string>("LastName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnOrder(5)
                        .HasComment("The last name or family name of a user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(8)
                        .HasComment("The user or entity responsible for modifying the record");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(9)
                        .HasComment("The date and time when the record was last modified");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUser", (string)null);
                });

            modelBuilder.Entity("ePTS.Entities.Identity.ApplicationUserOrganization", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ApplicationUserOrganization");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAcademicYear", b =>
                {
                    b.Property<int>("RefAcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAcademicYearId"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("A short code that represents the academic year");

                    b.Property<string>("Description")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6)
                        .HasComment("Date on which the academic year ends");

                    b.Property<int?>("RefAcademicYearStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5)
                        .HasComment("Date on which the academic year starts");

                    b.HasKey("RefAcademicYearId");

                    b.HasIndex("RefAcademicYearStatusId");

                    b.ToTable("RefAcademicYear");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAcademicYearStatus", b =>
                {
                    b.Property<int>("RefAcademicYearStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each academic year status in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAcademicYearStatusId"));

                    b.Property<string>("AcademicYearStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the academic year status");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the academic year status");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the academic year statuses should be displayed");

                    b.HasKey("RefAcademicYearStatusId");

                    b.ToTable("RefAcademicYearStatus");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentCategory", b =>
                {
                    b.Property<int>("RefAssessmentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment category in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentCategoryId"));

                    b.Property<string>("AssessmentCategory")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment category");

                    b.Property<string>("AssessmentCategoryDescription")
                        .HasMaxLength(384)
                        .HasColumnType("nvarchar(384)")
                        .HasColumnOrder(4)
                        .HasComment("The description of the assessment category");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the assessment category");

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(5)
                        .HasComment("The grade level for the assessment category");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("A numeric value that represents the order in which the assessment categories should be displayed");

                    b.HasKey("RefAssessmentCategoryId");

                    b.HasIndex("RefGradeLevelId");

                    b.ToTable("RefAssessmentCategory");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentPlatformType", b =>
                {
                    b.Property<int>("RefAssessmentPlatformTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentPlatformTypeId"));

                    b.Property<string>("AssessmentPlatformType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the assessment platform type");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefAssessmentPlatformTypeId");

                    b.ToTable("RefAssessmentPlatformType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentStatus", b =>
                {
                    b.Property<int>("RefAssessmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentStatusId"));

                    b.Property<string>("AssessmentStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the assessment status");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefAssessmentStatusId");

                    b.ToTable("RefAssessmentStatus");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentTerm", b =>
                {
                    b.Property<int>("RefAssessmentTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentTermId"));

                    b.Property<string>("AssessmentTerm")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the assessment term");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefAssessmentTermId");

                    b.ToTable("RefAssessmentTerm");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentType", b =>
                {
                    b.Property<int>("RefAssessmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentTypeId"));

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the assessment type");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefAssessmentTypeId");

                    b.ToTable("RefAssessmentType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentWeek", b =>
                {
                    b.Property<int>("RefAssessmentWeekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAssessmentWeekId"));

                    b.Property<string>("AssessmentWeek")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the assessment week");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefAssessmentWeekId");

                    b.ToTable("RefAssessmentWeek");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Property<int>("RefGradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradeLevelId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the grade level");

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<string>("GradeLevelId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(4)
                        .HasComment("Abbreviated representation or code used to denote different educational or academic levels, such as G1 for Grade 1, or P1 for Primary 1");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.HasKey("RefGradeLevelId");

                    b.ToTable("RefGradeLevel");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookAssessmentStatus", b =>
                {
                    b.Property<int>("RefGradebookAssessmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradebookAssessmentStatusId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the gradebook assessment status");

                    b.Property<string>("GradebookAssessmentStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefGradebookAssessmentStatusId");

                    b.ToTable("RefGradebookAssessmentStatus");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookPeriodStatus", b =>
                {
                    b.Property<int>("RefGradebookPeriodStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradebookPeriodStatusId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("GradebookPeriodStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefGradebookPeriodStatusId");

                    b.ToTable("RefGradebookPeriodStatus");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookPeriodType", b =>
                {
                    b.Property<int>("RefGradebookPeriodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradebookPeriodTypeId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the gradebook period type");

                    b.Property<string>("GradebookPeriodType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefGradebookPeriodTypeId");

                    b.ToTable("RefGradebookPeriodType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookStatus", b =>
                {
                    b.Property<int>("RefGradebookStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradebookStatusId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the gradebook status");

                    b.Property<string>("GradebookStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefGradebookStatusId");

                    b.ToTable("RefGradebookStatus");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefLocation", b =>
                {
                    b.Property<string>("RefLocationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1)
                        .HasComment("A unique identifier for the geographic location record of the Organization");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnOrder(5)
                        .HasComment("Latitude coordinates of the location in decimal degrees format");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2)
                        .HasComment("The name of the location");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnOrder(6)
                        .HasComment("Longitude coordinates of the location in decimal degrees format");

                    b.Property<string>("ParentLocationId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(4)
                        .HasComment("A reference to the parent location of this location.");

                    b.Property<int?>("RefLocationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3)
                        .HasComment("A reference to the type of location (e.g., country, state, province, city, etc.)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.HasKey("RefLocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("RefLocationTypeId");

                    b.ToTable("RefLocation");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefLocationType", b =>
                {
                    b.Property<int>("RefLocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefLocationTypeId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the location type");

                    b.Property<int>("LocationLevel")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.HasKey("RefLocationTypeId");

                    b.ToTable("RefLocationType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Property<int>("RefOrganizationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The foreign key identifier of the type of organization or entity. ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefOrganizationTypeId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("A short code that represents the organization type");

                    b.Property<bool>("IsOrganizationUnit")
                        .HasColumnType("bit")
                        .HasColumnOrder(4)
                        .HasComment("A Boolean value indicating whether this entity is a container");

                    b.Property<bool?>("IsSchool")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.HasKey("RefOrganizationTypeId");

                    b.ToTable("RefOrganizationType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefParticipantType", b =>
                {
                    b.Property<int>("RefParticipantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefParticipantTypeId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the participant type");

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefParticipantTypeId");

                    b.ToTable("RefParticipantType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefPerformanceLevel", b =>
                {
                    b.Property<int>("RefPerformanceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefPerformanceLevelId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the performance level");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6)
                        .HasComment("The color for the performance level");

                    b.Property<double?>("MaxPerformanceLevel")
                        .HasColumnType("float")
                        .HasColumnOrder(5)
                        .HasComment("The maximum performance level");

                    b.Property<double?>("MinPerformanceLevel")
                        .HasColumnType("float")
                        .HasColumnOrder(4)
                        .HasComment("The minimum performance level");

                    b.Property<string>("PerformanceLevel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<string>("PerformanceLevelText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(7)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefPerformanceLevelId");

                    b.ToTable("RefPerformanceLevel");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolAdministrationType", b =>
                {
                    b.Property<int>("RefSchoolAdministrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The unique identifier for each assessment item type in the table");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolAdministrationTypeId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the school administration type");

                    b.Property<string>("SchoolAdministrationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3)
                        .HasComment("The name of the assessment item type ");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("A numeric value that represents the order in which the assessment item type should be displayed");

                    b.HasKey("RefSchoolAdministrationTypeId");

                    b.ToTable("RefSchoolAdministrationType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolLanguage", b =>
                {
                    b.Property<int>("RefSchoolLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolLanguageId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the school language");

                    b.Property<string>("SchoolLanguage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefSchoolLanguageId");

                    b.ToTable("RefSchoolLanguage");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolLocation", b =>
                {
                    b.Property<int>("RefSchoolLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The foreign key identifier of the type of location of the school (i.e. Urban, Rural).");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolLocationId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the school location");

                    b.Property<string>("SchoolLocation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefSchoolLocationId");

                    b.ToTable("RefSchoolLocation");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolStatus", b =>
                {
                    b.Property<int>("RefSchoolStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolStatusId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the school status");

                    b.Property<string>("SchoolStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefSchoolStatusId");

                    b.ToTable("RefSchoolStatus");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolType", b =>
                {
                    b.Property<int>("RefSchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The foreign key identifier of the type of education institution as classified by its primary focus (i.e. Primary, Secondary).");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSchoolTypeId"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("A short code that represents the school type");

                    b.Property<string>("SchoolType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefSchoolTypeId");

                    b.ToTable("RefSchoolType");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSex", b =>
                {
                    b.Property<int>("RefSexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("The foreign key identifier of the sex of the Person.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefSexId"));

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.Property<string>("SexId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnOrder(3)
                        .HasComment("Abbreviated representation or code used to denote the sex of an individual, such as F for Female");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("RefSexId");

                    b.ToTable("RefSex");
                });

            modelBuilder.Entity("ePTS.Entities.Core.School", b =>
                {
                    b.HasBaseType("ePTS.Entities.Core.Organization");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(20)
                        .HasComment("The date when the school was closed");

                    b.Property<string>("HeadTeacher")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(18)
                        .HasComment("The name of the head teacher or principal of the school");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(19)
                        .HasComment("The date when the school was opened");

                    b.Property<int?>("RefSchoolAdministrationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(15)
                        .HasComment("A reference to the type of administration for the school, such as private or public. This is a foreign key that references the SchoolAdministrationType table");

                    b.Property<int?>("RefSchoolLanguageId")
                        .HasColumnType("int")
                        .HasColumnOrder(16)
                        .HasComment("A reference to the language of instruction for the school. This is a foreign key that references the SchoolLanguage table");

                    b.Property<int?>("RefSchoolLocationId")
                        .HasColumnType("int")
                        .HasColumnOrder(14)
                        .HasComment("A reference to the location of the school, such as rural or urban. This is a foreign key that references the SchoolLocation table");

                    b.Property<int?>("RefSchoolStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(17)
                        .HasComment("A reference to the status of the school, such as active or inactive. This is a foreign key that references the SchoolStatus table");

                    b.Property<int?>("RefSchoolTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(13)
                        .HasComment("A reference to the type of school, such as primary, secondary, or vocational. This is a foreign key that references the SchoolType table");

                    b.Property<string>("SchoolCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(12)
                        .HasComment("A short code that represents the unique school (such as the school EMIS number)");

                    b.HasIndex("RefSchoolAdministrationTypeId");

                    b.HasIndex("RefSchoolLanguageId");

                    b.HasIndex("RefSchoolLocationId");

                    b.HasIndex("RefSchoolStatusId");

                    b.HasIndex("RefSchoolTypeId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ePTS.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ePTS.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ePTS.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ePTS.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ePTS.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.Assessment", b =>
                {
                    b.HasOne("ePTS.Entities.Reference.RefAssessmentStatus", null)
                        .WithMany("Assessments")
                        .HasForeignKey("RefAssessmentStatusId");

                    b.HasOne("ePTS.Entities.Reference.RefAssessmentType", null)
                        .WithMany("Assessments")
                        .HasForeignKey("RefAssessmentTypeId");

                    b.HasOne("ePTS.Entities.Reference.RefGradeLevel", null)
                        .WithMany("Assessments")
                        .HasForeignKey("RefGradeLevelId");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentItem", b =>
                {
                    b.HasOne("ePTS.Entities.Assessments.Assessment", "Assessments")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("ePTS.Entities.Reference.RefAssessmentCategory", "AssessmentCategories")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("RefAssessmentCategoryId");

                    b.Navigation("AssessmentCategories");

                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentPerformanceLevel", b =>
                {
                    b.HasOne("ePTS.Entities.Gradebooks.GradebookAssessment", "GradebookAssessments")
                        .WithMany("AssessmentPerformanceLevels")
                        .HasForeignKey("GradebookAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefPerformanceLevel", "PerformanceLevels")
                        .WithMany("AssessmentPerformanceLevels")
                        .HasForeignKey("RefPerformanceLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefSex", "Sex")
                        .WithMany("AssessmentPerformanceLevels")
                        .HasForeignKey("RefSexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradebookAssessments");

                    b.Navigation("PerformanceLevels");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentResult", b =>
                {
                    b.HasOne("ePTS.Entities.Assessments.AssessmentItem", "AssessmentItems")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("AssessmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Gradebooks.GradebookAssessment", "GradebookAssessments")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("GradebookAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentItems");

                    b.Navigation("GradebookAssessments");
                });

            modelBuilder.Entity("ePTS.Entities.Core.Organization", b =>
                {
                    b.HasOne("ePTS.Entities.Core.Organization", "ParentOrganizations")
                        .WithMany("Organizations")
                        .HasForeignKey("ParentOrganizationId");

                    b.HasOne("ePTS.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Organizations")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("ePTS.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Organizations")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.Navigation("Locations");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("ParentOrganizations");
                });

            modelBuilder.Entity("ePTS.Entities.Core.SchoolAcademicYear", b =>
                {
                    b.HasOne("ePTS.Entities.Core.School", "Schools")
                        .WithMany("SchoolAcademicYears")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefAcademicYear", "AcademicYears")
                        .WithMany("SchoolAcademicYears")
                        .HasForeignKey("RefAcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefAcademicYearStatus", "AcademicYearStatus")
                        .WithMany("SchoolAcademicYears")
                        .HasForeignKey("RefAcademicYearStatusId");

                    b.Navigation("AcademicYearStatus");

                    b.Navigation("AcademicYears");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.Gradebook", b =>
                {
                    b.HasOne("ePTS.Entities.Assessments.Assessment", "Assessments")
                        .WithMany("Gradebooks")
                        .HasForeignKey("AssessmentId");

                    b.HasOne("ePTS.Entities.Gradebooks.GradebookPeriod", "GradebookPeriods")
                        .WithMany("Gradebooks")
                        .HasForeignKey("GradebookPeriodId");

                    b.HasOne("ePTS.Entities.Reference.RefAssessmentPlatformType", "AssessmentPlatformTypes")
                        .WithMany("Gradebooks")
                        .HasForeignKey("RefAssessmentPlatformTypeId");

                    b.HasOne("ePTS.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("Gradebooks")
                        .HasForeignKey("RefGradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefGradebookStatus", "GradebookStatus")
                        .WithMany("Gradebooks")
                        .HasForeignKey("RefGradebookStatusId");

                    b.HasOne("ePTS.Entities.Core.SchoolAcademicYear", "SchoolAcademicYears")
                        .WithMany("Gradebooks")
                        .HasForeignKey("SchoolAcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentPlatformTypes");

                    b.Navigation("Assessments");

                    b.Navigation("GradeLevels");

                    b.Navigation("GradebookPeriods");

                    b.Navigation("GradebookStatus");

                    b.Navigation("SchoolAcademicYears");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookAssessment", b =>
                {
                    b.HasOne("ePTS.Entities.Gradebooks.GradebookAssessmentPeriod", "GradebookAssessmentPeriods")
                        .WithMany("GradebookAssessments")
                        .HasForeignKey("GradebookAssessmentPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Gradebooks.Gradebook", "Gradebooks")
                        .WithMany("GradebookAssessments")
                        .HasForeignKey("GradebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefGradebookAssessmentStatus", "GradebookAssessmentStatus")
                        .WithMany("GradebookAssessments")
                        .HasForeignKey("RefGradebookAssessmentStatusId");

                    b.Navigation("GradebookAssessmentPeriods");

                    b.Navigation("GradebookAssessmentStatus");

                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookAssessmentPeriod", b =>
                {
                    b.HasOne("ePTS.Entities.Gradebooks.GradebookPeriod", "GradebookPeriods")
                        .WithMany("GradebookAssessmentPeriods")
                        .HasForeignKey("GradebookPeriodId");

                    b.HasOne("ePTS.Entities.Reference.RefAssessmentTerm", "AssessmentTerms")
                        .WithMany("GradebookAssessmentPeriods")
                        .HasForeignKey("RefAssessmentTermId");

                    b.HasOne("ePTS.Entities.Reference.RefAssessmentWeek", "AssessmentWeeks")
                        .WithMany("GradebookAssessmentPeriods")
                        .HasForeignKey("RefAssessmentWeekId");

                    b.Navigation("AssessmentTerms");

                    b.Navigation("AssessmentWeeks");

                    b.Navigation("GradebookPeriods");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookEnrollment", b =>
                {
                    b.HasOne("ePTS.Entities.Gradebooks.Gradebook", "Gradebooks")
                        .WithMany("GradebookEnrollments")
                        .HasForeignKey("GradebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gradebooks");

                    b.Navigation("ParticipantTypes");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookPeriod", b =>
                {
                    b.HasOne("ePTS.Entities.Reference.RefGradeLevel", null)
                        .WithMany("GradebookPeriods")
                        .HasForeignKey("RefGradeLevelId");

                    b.HasOne("ePTS.Entities.Reference.RefGradebookPeriodStatus", null)
                        .WithMany("GradebookPeriods")
                        .HasForeignKey("RefGradebookPeriodStatusId");

                    b.HasOne("ePTS.Entities.Reference.RefGradebookPeriodType", null)
                        .WithMany("GradebookPeriods")
                        .HasForeignKey("RefGradebookPeriodTypeId");
                });

            modelBuilder.Entity("ePTS.Entities.Identity.ApplicationUserOrganization", b =>
                {
                    b.HasOne("ePTS.Entities.Core.Organization", "Organizations")
                        .WithMany("ApplicationUserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Identity.ApplicationUser", "Users")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAcademicYear", b =>
                {
                    b.HasOne("ePTS.Entities.Reference.RefAcademicYearStatus", null)
                        .WithMany("AcademicYears")
                        .HasForeignKey("RefAcademicYearStatusId");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentCategory", b =>
                {
                    b.HasOne("ePTS.Entities.Reference.RefGradeLevel", "RefGradeLevel")
                        .WithMany("AssessmentCategories")
                        .HasForeignKey("RefGradeLevelId");

                    b.Navigation("RefGradeLevel");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefLocation", b =>
                {
                    b.HasOne("ePTS.Entities.Reference.RefLocation", "ParentLocations")
                        .WithMany("Locations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("ePTS.Entities.Reference.RefLocationType", "LocationTypes")
                        .WithMany("Locations")
                        .HasForeignKey("RefLocationTypeId");

                    b.Navigation("LocationTypes");

                    b.Navigation("ParentLocations");
                });

            modelBuilder.Entity("ePTS.Entities.Core.School", b =>
                {
                    b.HasOne("ePTS.Entities.Core.Organization", null)
                        .WithOne()
                        .HasForeignKey("ePTS.Entities.Core.School", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePTS.Entities.Reference.RefSchoolAdministrationType", "SchoolAdministrationTypes")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolAdministrationTypeId");

                    b.HasOne("ePTS.Entities.Reference.RefSchoolLanguage", "SchoolLanguages")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolLanguageId");

                    b.HasOne("ePTS.Entities.Reference.RefSchoolLocation", "SchoolLocations")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolLocationId");

                    b.HasOne("ePTS.Entities.Reference.RefSchoolStatus", "SchoolStatus")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolStatusId");

                    b.HasOne("ePTS.Entities.Reference.RefSchoolType", "SchoolTypes")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolTypeId");

                    b.Navigation("SchoolAdministrationTypes");

                    b.Navigation("SchoolLanguages");

                    b.Navigation("SchoolLocations");

                    b.Navigation("SchoolStatus");

                    b.Navigation("SchoolTypes");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.Assessment", b =>
                {
                    b.Navigation("AssessmentItems");

                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Assessments.AssessmentItem", b =>
                {
                    b.Navigation("AssessmentResults");
                });

            modelBuilder.Entity("ePTS.Entities.Core.Organization", b =>
                {
                    b.Navigation("ApplicationUserOrganizations");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ePTS.Entities.Core.SchoolAcademicYear", b =>
                {
                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.Gradebook", b =>
                {
                    b.Navigation("GradebookAssessments");

                    b.Navigation("GradebookEnrollments");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookAssessment", b =>
                {
                    b.Navigation("AssessmentPerformanceLevels");

                    b.Navigation("AssessmentResults");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookAssessmentPeriod", b =>
                {
                    b.Navigation("GradebookAssessments");
                });

            modelBuilder.Entity("ePTS.Entities.Gradebooks.GradebookPeriod", b =>
                {
                    b.Navigation("GradebookAssessmentPeriods");

                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAcademicYear", b =>
                {
                    b.Navigation("SchoolAcademicYears");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAcademicYearStatus", b =>
                {
                    b.Navigation("AcademicYears");

                    b.Navigation("SchoolAcademicYears");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentCategory", b =>
                {
                    b.Navigation("AssessmentItems");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentPlatformType", b =>
                {
                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentStatus", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentTerm", b =>
                {
                    b.Navigation("GradebookAssessmentPeriods");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentType", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefAssessmentWeek", b =>
                {
                    b.Navigation("GradebookAssessmentPeriods");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Navigation("AssessmentCategories");

                    b.Navigation("Assessments");

                    b.Navigation("GradebookPeriods");

                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookAssessmentStatus", b =>
                {
                    b.Navigation("GradebookAssessments");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookPeriodStatus", b =>
                {
                    b.Navigation("GradebookPeriods");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookPeriodType", b =>
                {
                    b.Navigation("GradebookPeriods");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefGradebookStatus", b =>
                {
                    b.Navigation("Gradebooks");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefLocation", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefLocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefParticipantType", b =>
                {
                    b.Navigation("SchoolEnrollments");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefPerformanceLevel", b =>
                {
                    b.Navigation("AssessmentPerformanceLevels");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolAdministrationType", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolLanguage", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolLocation", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolStatus", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSchoolType", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("ePTS.Entities.Reference.RefSex", b =>
                {
                    b.Navigation("AssessmentPerformanceLevels");
                });

            modelBuilder.Entity("ePTS.Entities.Core.School", b =>
                {
                    b.Navigation("SchoolAcademicYears");
                });
#pragma warning restore 612, 618
        }
    }
}
